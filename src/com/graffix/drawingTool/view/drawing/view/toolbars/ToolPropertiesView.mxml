<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   height="30" cornerRadius="5">
	<s:states>
		<s:State name="ClosedFigureState"/>
		<s:State name="LineState"/>
		<s:State name="TextState"/>
	</s:states>
	<fx:Declarations>
		<s:Parallel id="transitionEffect" targets="{[lineControls, fillControls, this, layoutControls]}">
			<s:Fade/>
			<s:Resize/>
		</s:Parallel>
	</fx:Declarations>
	<s:transitions>
		<s:Transition fromState="*" toState="*" effect="{transitionEffect}"/>
	</s:transitions>
	<fx:Script>
		<![CDATA[
			import com.graffix.drawingTool.view.drawing.shapes.IPropertyChangable;
			import com.graffix.drawingTool.view.drawing.shapes.BaseShape;
			import com.graffix.drawingTool.view.drawing.shapes.EllipseShape;
			import com.graffix.drawingTool.view.drawing.shapes.FreehandShape;
			import com.graffix.drawingTool.view.drawing.shapes.LineShape;
			import com.graffix.drawingTool.view.drawing.shapes.RectShape;
			import com.graffix.drawingTool.view.drawing.shapes.SelectTool;
			import com.graffix.drawingTool.view.drawing.shapes.TextShape;
			
			import mx.events.ColorPickerEvent;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var _currentTool:IPropertyChangable;

			public function get currentTool():IPropertyChangable
			{
				return _currentTool;
			}

			public function set currentTool(value:IPropertyChangable):void
			{
				_currentTool = value;
				if(_toolType == SelectTool.TRANSFORM_TOOL)
				{
					setState(_currentTool.type);
				}
			}
			
			private function setState(type:int):void
			{
				switch(type)
				{
					case LineShape.LINE_SHAPE:
						currentState = "LineState";
						break;
					
					case FreehandShape.FREEHAND_SHAPE:
						currentState = "LineState";
						break;
					
					case EllipseShape.ELLIPSE_SHAPE:
						currentState = "ClosedFigureState";
						break;
					
					case RectShape.RECT_SHAPE:
						currentState = "ClosedFigureState";
						break;
					case TextShape.TEXT_SHAPE:
						currentState = "TextState";
						break;
				}
			}
			
			private var _toolType:int;
			public function set toolType(type:int):void
			{
				_toolType = type;
				setState(_toolType);
			}

			protected function lineSizeCombo_changeHandler(event:IndexChangeEvent):void
			{
				if(_currentTool)
				{
					_currentTool.setProperty(BaseShape.PROPERTY_LINE_SIZE, event.newIndex + 2);
				}
			}


			protected function lineColorPicker_changeHandler(event:ColorPickerEvent):void
			{
				if(_currentTool)
				{
					_currentTool.setProperty(BaseShape.PROPERTY_LINE_COLOR, event.color);
				}
			}


			protected function fillColorPicker_changeHandler(event:ColorPickerEvent):void
			{
				if(_currentTool)
				{
					_currentTool.setProperty(BaseShape.PROPERTY_FILL_COLOR, event.color);
				}
			}


			protected function fillCheckbox_changeHandler(event:Event):void
			{
				if(_currentTool)
				{
					_currentTool.setProperty(BaseShape.PROPERTY_FILL_ENABLED, fillCheckbox.selected);
				}
			}


			protected function edittextButton_clickHandler(event:MouseEvent):void
			{
				if(_currentTool)
				{
					(currentTool as TextShape).editText();
				}
			}


			protected function layoutUpButton_clickHandler(event:MouseEvent):void
			{
				if(_currentTool)
				{
					(currentTool as BaseShape).changeOrder( "up" );
				}
			}


			protected function layoutBottomButton_clickHandler(event:MouseEvent):void
			{
				if(_currentTool)
				{
					(currentTool as BaseShape).changeOrder( "down" );
				}
			}

		]]>
	</fx:Script>
	<s:layout>
		<s:HorizontalLayout  paddingLeft="5" paddingRight="5" verticalAlign="middle"
							gap="15"/>
	</s:layout>
	
	<s:HGroup id="textEdit">
		<s:Button label="Edit Text" id="edittextButton" includeIn="TextState" click="edittextButton_clickHandler(event)"/>
	</s:HGroup>
	
	<s:HGroup id="lineControls" verticalAlign="middle" includeIn="LineState, ClosedFigureState">
		<s:Label text="Line size:"/>
		<s:ComboBox width="40" selectedIndex="{_currentTool.lineSize - 2}" id="lineSizeCombo" change="lineSizeCombo_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList>
					<fx:String>1</fx:String>
					<fx:String>2</fx:String>
					<fx:String>3</fx:String>
					<fx:String>4</fx:String>
					<fx:String>5</fx:String>
					<fx:String>6</fx:String>
					<fx:String>7</fx:String>
					<fx:String>8</fx:String>
					<fx:String>9</fx:String>
					<fx:String>10</fx:String>
				</s:ArrayList>
			</s:dataProvider>
		</s:ComboBox>	
		<s:Label text="Line color:"/>
		<mx:ColorPicker selectedColor="{_currentTool.lineColor}" id="lineColorPicker" change="lineColorPicker_changeHandler(event)"/>		
	</s:HGroup>
	
	<mx:VRule height="80%" includeIn="ClosedFigureState"/>
	
	<s:HGroup id="fillControls" includeIn="ClosedFigureState" verticalAlign="middle">
		<s:Label text="Fill shape with color:"/>
		<s:CheckBox id="fillCheckbox" selected="{_currentTool.hasFill}" change="fillCheckbox_changeHandler(event)"/>
		<s:Label text="Fill color:"/>
		<mx:ColorPicker enabled="{fillCheckbox.selected}" selectedColor="{_currentTool.fillColor}" id="fillColorPicker" change="fillColorPicker_changeHandler(event)"/>		
	</s:HGroup>
	<mx:VRule height="80%" />
	<s:HGroup id="layoutControls" verticalAlign="middle">
		<s:Button id="layoutUpButton" label="Up" click="layoutUpButton_clickHandler(event)"/>
		<s:Button id="layoutBottomButton" label="Down" click="layoutBottomButton_clickHandler(event)"/>
	</s:HGroup>
</s:BorderContainer>
