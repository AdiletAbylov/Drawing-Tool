<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 creationComplete="init()"
		 enabled="false"
		 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:area="org.graffix.drawr.view.area.*" xmlns:view="com.graffix.drawingTool.view.*" xmlns:drawing="com.graffix.drawingTool.view.drawing.*" xmlns:toolbars="org.graffix.drawr.view.toolbars.*" xmlns:services="com.graffix.drawingTool.business.services.*" >
	<fx:Declarations>
		
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import org.graffix.drawr.events.ToolSelectEvent;
			import org.graffix.drawr.events.ShapeChangedEvent;
			import org.graffix.drawr.events.pages.PageManagerEvent;
			import org.graffix.drawr.managers.DrawManager;
			import org.graffix.drawr.managers.PagesManager;
			import org.graffix.drawr.view.area.Page;
			import org.graffix.drawr.vo.ShapeDrawData;
			
			import spark.events.IndexChangeEvent;
			
			private var _so:SharedObject;
			
			public function get sharedObject():SharedObject
			{
				return _so;
			}
			
			public function set sharedObject(value:SharedObject):void
			{
				_so = value;
			}
			
			[Bindable]
			private var _drawManager:DrawManager;
			
			protected function init():void
			{
				
				addEventListener(ShapeChangedEvent.SHAPE_ADDED, onShapeAdded);
				addEventListener(ShapeChangedEvent.SHAPE_CHANGED, onShapeChanged);
				addEventListener(ShapeChangedEvent.SHAPE_REMOVED, onShapeRemoved);
				if(_so)
				{
					_pagesManager = new PagesManager( _so, drawArea );
					_pagesManager.addEventListener(PageManagerEvent.INIT_COMPLETE, onPagesInitComplete);
				}
			}
			
			
			
			private function  onShapeAdded(event:ShapeChangedEvent):void
			{
				trace("shapeAdded");
				_so.setProperty(event.shapeData.shapeID, event.shapeData);
				_so.setDirty(event.shapeData.shapeID);
			}
			
			private function onShapeChanged(event:ShapeChangedEvent):void
			{
				trace("shapeChanged");
				_so.setProperty(event.shapeData.shapeID, event.shapeData);
				_so.setDirty(event.shapeData.shapeID);
			}
			
			private function onShapeRemoved(event:ShapeChangedEvent):void
			{
				trace("shapeRemoved");
				if(_so.data.hasOwnProperty(event.shapeData.shapeID))
				{
					_so.setProperty(event.shapeData.shapeID, null);
				}
				//delete _so.data[event.shapeData.shapeID];
				//_so.setDirty(event.shapeData.shapeID);
			}
			
			protected function toolsview1_TOOL_SELECTHandler(event:ToolSelectEvent):void
			{
				_drawManager.selectedTool = event.toolType;
				_drawManager.toolData = event.data;
			}
			
			
			protected function clearButton_clickHandler(event:MouseEvent):void
			{
				drawArea.currentPage.clear();
				//_so.clear();
			}
			
			[Embed("/org/graffix/drawr/view/assets/remove.png")]
			protected const ICON:Class;
			
			[Bindable]
			private var _pagesManager:PagesManager;
			
			
			
			
			protected function screenshotButton_clickHandler(event:MouseEvent):void
			{
				drawArea.currentPage.makeScreenshot();
			}
			
			//
			// start to draw only after pages initialization complete
			protected function onPagesInitComplete(event:PageManagerEvent):void
			{
				_drawManager = new DrawManager( drawArea, _so );
				_drawManager.processShapes();
				_drawManager.startListen();
				enabled = true;
			}
			
			protected function resetButton_clickHandler(event:MouseEvent):void
			{
				for(var id:String in _so.data)
				{
					_so.setProperty(id, null);
					_so.setDirty(id);
				}
			}
			
		]]>
	</fx:Script>
	
	<s:BorderContainer left="48" right="2" top="2" bottom="2">
		<area:DrawArea left="2" right="2" top="2" bottom="2" id="drawArea" drawGrid="true" />
	</s:BorderContainer>
	
	<toolbars:ToolsView id="toolbar" left="10" top="10"
						drawMode="{_drawManager.drawMode}"
						TOOL_SELECT="toolsview1_TOOL_SELECTHandler(event)">
	</toolbars:ToolsView>
	<s:HGroup left="55" top="5">
		<s:Button id="clearButton" 
				  click="clearButton_clickHandler(event)"
				  label="Clear"
				  icon="{ICON}"/>
		<s:Button id="screenshotButton"
				  label="Snapshot"
				  click="screenshotButton_clickHandler(event)"
				  />
		<toolbars:ToolPropertiesView id="toolProperties" left="130" top="10"
									 
									 currentShape="{_drawManager._currentShape}">
		</toolbars:ToolPropertiesView>
		<s:Button id="resetButton" label="reset" click="resetButton_clickHandler(event)"/>
	</s:HGroup>
</s:Group>
